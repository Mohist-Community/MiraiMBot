plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.5.20-RC' // 请确保添加 Kotlin，至少使用 1.5 版本
    id "edu.sc.seis.launch4j" version "2.5.0"
}

group 'com.mohistmc.miraimbot'
version '0.4.1'

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

repositories {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.mohistmc.com/' }
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    //compile 'net.mamoe:mirai-login-solver-selenium:1.0-dev-10'
    compile 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

}


jar {
    String someString = ''

    configurations.runtime.each { someString = someString + " libraries//" + it.name }
    from {
        configurations.runtime.collect {
            if (it.getName().contains("fastjson")
                    || it.getName().contains("commons-io")
                    || it.getName().contains("Yaml")
            )
                zipTree(it)
        }

    }
    manifest {
        attributes("Manifest-Version": 1.0,
                'Build-date': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Build-by': 'MohistMC',
                'Class-Path': someString)
    }
}

task copyLibraries(type: Copy) {
    from configurations.runtime
    into('build/libs/libraries')
}

task buildSourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

//only java8
launch4j {
    mainClassName = "com.mohistmc.miraimbot.MiraiMBot"
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version
            from components.java
        }
    }

    repositories {
        mavenLocal()
        maven {
            name = "Mohist-Maven"
            setUrl("file:/maven/")
        }
    }
}

copyLibraries.dependsOn clean
buildSourceJar.dependsOn copyLibraries
build.dependsOn buildSourceJar